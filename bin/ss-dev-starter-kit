#!/usr/bin/env php
<?php declare(strict_types=1);

$autoloadFile = __DIR__ . '/../vendor/autoload.php';
if (!file_exists($autoloadFile)) {
    throw new RuntimeException('You need to run composer install until we make a phar for this');
}
require_once $autoloadFile;

use Silverstripe\DevStarterKit\Application;
use Silverstripe\DevStarterKit\Command;

Application::bootstrap();

// @TODO consider handling version number similarly to how composer does.
// You can use the major and probably even minor version as a constant,
// and then when packaging the phar mark the actual patch version as well.
$application = new Application('Silverstripe Developer Starter Kit');

// @TODO review the default options in Application::getDefaultInputDefinition()
// Make sure we're respecting everything there - or remove anything we explicitly
// have decided not to respect.

// Add custom commands
$application->addCommands([
    // new Command\??\Proxy(), // see https://symfony.com/doc/current/setup/symfony_server.html#setting-up-the-local-proxy
    new Command\Env\Create(),
    new Command\Env\Destroy(),
    // new Command\Env\Info(), // maybe this is the default for the config command (i.e. no options), instead of its own command?
    // new Command\Env\Config(), // change php version, toggle xdebug, etc
    // new Command\Docker\Up(), // docker compose up -d
    // new Command\Docker\Down(), // docker compose down (with options e.g. -v)
    // new Command\Docker\Exec(), // execute commands in a docker container (web server by default) (with options e.g. --root --interactive)
    // new Command\Cli\Sake(),
    // new Command\Cli\LintPhp(),
    // new Command\Cli\Phpunit(), // Do we want a behat command as well? May as well, right?
    // new Command\Database\Dump(),
    // new Command\Database\Restore(),
]);

// start
$application->run();
